package mapreduce

import (
	"encoding/json"
	"hash/fnv"
	"os"
	"log"
	"io/ioutil"
)

func doMap(
	jobName string, // the name of the MapReduce job
	mapTask int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(filename string, contents string) []KeyValue,
) {
	//
	// doMap manages one map task: it should read one of the input files
	// (inFile), call the user-defined map function (mapF) for that file's
	// contents, and partition mapF's output into nReduce intermediate files.
	//
	// There is one intermediate file per reduce task. The file name
	// includes both the map task number and the reduce task number. Use
	// the filename generated by reduceName(jobName, mapTask, r)
	// as the intermediate file for reduce task r. Call ihash() (see
	// below) on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
	// Your code here (Part I).
	//
	// 1 参数校验
	if nReduce < 0 {
		log.Println("nReduce must be positive")
	}
	// 2 读取输入文件
	if fileObj, err := os.Open(inFile); err == nil {
		defer fileObj.Close()
		if contents, err := ioutil.ReadAll(fileObj); err == nil {
			// 3 通过用户定义的map函数转换为KeyValue Pair
			kvs := mapF(inFile,string(contents))
			// 4 初始化中间键值对文件
			interFiles := make([]intermediateFile, nReduce ,nReduce)
			for i := range interFiles {
				interFiles[i] = intermediateFile{fileName:reduceName(jobName,mapTask,i),buffer:make([]KeyValue,0,32)}
			}
			// 5 遍历所有KeyValue Pairs,根据key计算hash值，并append到对应的数据结构中
			for _,kv := range kvs {
				reduceNum := ihash(kv.Key) % nReduce
				interFiles[reduceNum].buffer = append(interFiles[reduceNum].buffer,kv)
				// if (err != nil) {
				// 	log.Println(err)
				// }
			}
			// 6 排序，按key递增有序
			for i := range interFiles {
				// sort.Sort(interFiles[i])
				// 7 写入中间键值对文件
				if file,err := os.OpenFile(interFiles[i].fileName,os.O_RDWR | os.O_APPEND | os.O_CREATE,644); err == nil {
					defer file.Close()
					enc := json.NewEncoder(file)
					for _, kv := range interFiles[i].buffer {
						// {
						//    'Key' : "" , 'Value' : ""
						// }
							if err := enc.Encode(&kv); err != nil {
								log.Println(err)
							} 				
							
					}
				}
			}
		}
	}
}
type intermediateFile struct {
	fileName string
	buffer []KeyValue
}
func (in intermediateFile) Less(i,j int) bool {
	return in.buffer[i].Key < in.buffer[j].Key 
}
func (in intermediateFile) Len() int {
	return len(in.buffer)
}
func (in intermediateFile) Swap(i,j int) {
	in.buffer[i], in.buffer[j] = in.buffer[j], in.buffer[i]
}
func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
